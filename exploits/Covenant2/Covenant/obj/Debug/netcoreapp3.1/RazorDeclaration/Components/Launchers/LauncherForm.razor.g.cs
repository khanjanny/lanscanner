#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "128838a1eac5872e0445622f37b450c14b01085e"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.Launchers
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
using System.Net.Mime;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
using Covenant.Models.Listeners;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
using Covenant.Models.Launchers;

#line default
#line hidden
#nullable disable
    public partial class LauncherForm : OwningComponentBase<ICovenantService>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 175 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Launchers/LauncherForm.razor"
       
    [Parameter]
    public Launcher Launcher { get; set; }

    [Parameter]
    public EventCallback<Launcher> OnGenerate { get; set; }

    private IEnumerable<Listener> _ActiveListeners;
    private IEnumerable<Listener> ActiveListeners
    {
        get
        {
            if (_ActiveListeners == null)
            {
                _ActiveListeners = Service.GetListeners().WaitResult().Where(L => L.Status == ListenerStatus.Active);
            }
            if (Launcher.ListenerId == 0 && _ActiveListeners.Count() > 0)
            {
                Launcher.ListenerId = _ActiveListeners.First().Id;
                StateHasChanged();
            }
            return _ActiveListeners;
        }
    }

    private IEnumerable<ImplantTemplate> _ApplicableImplantTemplates;
    private IEnumerable<ImplantTemplate> ApplicableImplantTemplates
    {
        get
        {
            if (_ApplicableImplantTemplates == null)
            {
                _ApplicableImplantTemplates = Service.GetImplantTemplates().WaitResult().Where(IT => ActiveListeners.Any(AL => IT.CompatibleListenerTypes.Contains(AL.ListenerType)));
            }
            if (Launcher.ImplantTemplateId == 0 && _ApplicableImplantTemplates.Count() > 0)
            {
                Launcher.ImplantTemplateId = _ApplicableImplantTemplates.First().Id;
                StateHasChanged();
            }
            return _ApplicableImplantTemplates;
        }
    }

    private bool RefreshNeeded { get; set; } = false;

    protected override void OnInitialized()
    {
        if (this.CurrentImplantTemplate != null)
        {
            this.Launcher.DotNetVersion = this.CurrentImplantTemplate.CompatibleDotNetVersions.First();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (RefreshNeeded)
        {
            await IJSRuntime.InvokeAsync<string>("RefreshSelectPicker", "#DotNetVersion.selectpicker");
            RefreshNeeded = false;
        }
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#DotNetVersion.selectpicker", ((int)Enum.Parse(typeof(Common.DotNetVersion), this.Launcher.DotNetVersion.ToString())).ToString());
        await IJSRuntime.InvokeAsync<string>("InitializeDateTimePicker", "#KillDate");
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#RuntimeIdentifier.selectpicker", ((int)Enum.Parse(typeof(Compiler.RuntimeIdentifier), this.Launcher.RuntimeIdentifier.ToString())).ToString());
    }

    private IEnumerable<string> GetApplicableDotNetVersions()
    {
        if (this.CurrentImplantTemplate != null)
        {
            IEnumerable<string> names = this.CurrentImplantTemplate.CompatibleDotNetVersions.Select(CDN => CDN.ToString());
            return Enum.GetNames(typeof(Common.DotNetVersion)).Where(s => names.Contains(s));
        }
        return new List<string>();
    }

    private ImplantTemplate CurrentImplantTemplate
    {
        get
        {
            if (ApplicableImplantTemplates.Any())
            {
                return ApplicableImplantTemplates.First(IT => IT.Id == this.Launcher.ImplantTemplateId);
            }
            return null;
        }
    }

    private void OnImplantTemplateChanged(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out int id))
        {
            this.Launcher.ImplantTemplateId = id;
            if (this.CurrentImplantTemplate != null)
            {
                this.Launcher.DotNetVersion = this.CurrentImplantTemplate.CompatibleDotNetVersions.First();
            }
            this.RefreshNeeded = true;
        }
    }

    private void UpdateValidateCert(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value.ToString(), out bool result))
        {
            Launcher.ValidateCert = result;
        }
    }

    private void UpdateUseCertPinning(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value.ToString(), out bool result))
        {
            Launcher.UseCertPinning = result;
        }
    }

    private async Task OnDownload()
    {
        string filename = (await Service.GetImplantTemplate(this.Launcher.ImplantTemplateId)).Name ?? "GruntStager";
        string fileext = ".exe";
        string mediatype = "";
        string content = "";

        switch (this.Launcher.Type)
        {
            case LauncherType.Binary:
                fileext = ".exe";
                mediatype = MediaTypeNames.Application.Octet;
                content = ((BinaryLauncher)this.Launcher).Base64ILByteString;
                break;
            case LauncherType.ShellCode:
                fileext = ".bin";
                mediatype = MediaTypeNames.Application.Octet;
                content = ((ShellCodeLauncher)this.Launcher).Base64ILByteString;
                break;
            case LauncherType.Cscript:
                fileext = ".js";
                mediatype = MediaTypeNames.Text.Plain;
                content = Convert.ToBase64String(Common.CovenantEncoding.GetBytes(((CscriptLauncher)this.Launcher).DiskCode));
                break;
            case LauncherType.InstallUtil:
                fileext = ".dll";
                mediatype = MediaTypeNames.Application.Octet;
                content = Convert.ToBase64String(Convert.FromBase64String(((InstallUtilLauncher)this.Launcher).DiskCode));
                break;
            case LauncherType.MSBuild:
                fileext = ".xml";
                mediatype = MediaTypeNames.Text.Plain;
                content = Convert.ToBase64String(Common.CovenantEncoding.GetBytes(((MSBuildLauncher)this.Launcher).DiskCode));
                break;
            case LauncherType.Mshta:
                fileext = ".hta";
                mediatype = MediaTypeNames.Text.Plain;
                content = Convert.ToBase64String(Common.CovenantEncoding.GetBytes(((MshtaLauncher)this.Launcher).DiskCode));
                break;
            case LauncherType.PowerShell:
                fileext = ".ps1";
                mediatype = MediaTypeNames.Text.Plain;
                content = Convert.ToBase64String(Common.CovenantEncoding.GetBytes(((PowerShellLauncher)this.Launcher).PowerShellCode));
                break;
            case LauncherType.Regsvr32:
                fileext = ".sct";
                mediatype = MediaTypeNames.Application.Octet;
                content = Convert.ToBase64String(Common.CovenantEncoding.GetBytes(((Regsvr32Launcher)this.Launcher).DiskCode));
                break;
            case LauncherType.Wmic:
                fileext = "xsl";
                mediatype = MediaTypeNames.Text.Plain;
                content = Convert.ToBase64String(Common.CovenantEncoding.GetBytes(((WmicLauncher)this.Launcher).DiskCode));
                break;
            case LauncherType.Wscript:
                fileext = "GruntStager.js";
                mediatype = MediaTypeNames.Text.Plain;
                content = Convert.ToBase64String(Common.CovenantEncoding.GetBytes(((WscriptLauncher)this.Launcher).DiskCode));
                break;
        }
        await IJSRuntime.InvokeAsync<string>("DownloadFile", filename + fileext, mediatype, content);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
    }
}
#pragma warning restore 1591
