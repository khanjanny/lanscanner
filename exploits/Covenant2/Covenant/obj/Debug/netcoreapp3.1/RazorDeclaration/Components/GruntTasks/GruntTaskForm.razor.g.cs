#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskForm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cbea955e8224fce2d87a95a6f19e906954b3fe17"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.GruntTasks
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskForm.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskForm.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskForm.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskForm.razor"
using Covenant.Models.Covenant;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskForm.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
    public partial class GruntTaskForm : OwningComponentBase<ICovenantService>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 304 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskForm.razor"
       
    private GruntTask _GruntTask;
    [Parameter]
    public GruntTask GruntTask
    {
        get
        {
            return _GruntTask;
        }
        set
        {
            if (value != null && value.Id > 0)
            {
                _GruntTask = Service.GetGruntTask(value.Id).WaitResult();
            }
            else
            {
                _GruntTask = value;
            }
        }
    }

    [Parameter]
    public string SubmitIcon { get; set; }

    [Parameter]
    public string SubmitLabel { get; set; }

    [Parameter]
    public EventCallback<GruntTask> OnSubmit { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [CascadingParameter]
    public Theme Theme { get; set; }

    private ElementReference CodeMirrorElement { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IJSRuntime.InvokeAsync<string>("InitializeCodeMirror", CodeMirrorElement, Theme.CodeMirrorTheme.ToString());
        }
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#Language.selectpicker", ((int)Enum.Parse(typeof(ImplantLanguage), this.GruntTask.Language.ToString())).ToString());
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#ReferenceSourceLibraries.selectpicker");
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#ReferenceAssemblies.selectpicker");
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#EmbeddedResources.selectpicker");
        if (this.GruntTask.Language == ImplantLanguage.CSharp)
        {
            await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#CompatibleDotNetVersions.selectpicker");
        }
    }

    private void AddAlias()
    {
        this.GruntTask.Aliases.Add("");
    }

    private void RemoveAlias()
    {
        if (this.GruntTask.Aliases.Count > 0)
        {
            this.GruntTask.Aliases.RemoveAt(this.GruntTask.Aliases.Count - 1);
        }
    }

    private void AddSuggestedValue(int index)
    {
        this.GruntTask.Options[index].SuggestedValues.Add("");
    }

    private void RemoveSuggestedValue(int index)
    {
        if (this.GruntTask.Options[index].SuggestedValues.Count > 0)
        {
            this.GruntTask.Options[index].SuggestedValues.RemoveAt(this.GruntTask.Options[index].SuggestedValues.Count - 1);
        }
    }

    private void AddOption()
    {
        this.GruntTask.Options.Add(new GruntTaskOption
        {
            Id = 0,
            GruntTaskId = this.GruntTask.Id,
            Name = "",
            Description = "",
            Value = "",
            DefaultValue = ""
        });
    }

    private void RemoveOption(int index)
    {
        this.GruntTask.Options.RemoveAt(index);
        StateHasChanged();
    }

    private IEnumerable<ReferenceSourceLibrary> GetReferenceSourceLibraries()
    {
        return Service.GetReferenceSourceLibraries().WaitResult();
    }

    private IEnumerable<ReferenceAssembly> GetReferenceAssemblies()
    {
        return Service.GetReferenceAssemblies().WaitResult();
    }

    private IEnumerable<EmbeddedResource> GetEmbeddedResources()
    {
        return Service.GetEmbeddedResources().WaitResult();
    }

    private async Task OnChangeReferenceSourceLibraries()
    {
        string[] rsls = await IJSRuntime.InvokeAsync<string[]>("GetValue", new object[] { "#ReferenceSourceLibraries" });
        IEnumerable<int> ids = rsls.Where(id => int.TryParse(id, out _)).Select(sid => int.Parse(sid));
        IEnumerable<int> adds = ids.Where(id => !this.GruntTask.ReferenceSourceLibraries.Select(RSL => RSL.Id).Contains(id));
        IEnumerable<int> removes = this.GruntTask.ReferenceSourceLibraries.Select(RSL => RSL.Id).Where(id => !ids.Contains(id));
        foreach (int id in adds)
        {
            this.GruntTask.Add(await Service.GetReferenceSourceLibrary(id));
        }
        foreach (int id in removes)
        {
            this.GruntTask.Remove(this.GruntTask.ReferenceSourceLibraries.Find(RSL => RSL.Id == id));
        }
    }

    private async Task OnChangeReferenceAssemblies()
    {
        string[] ras = await IJSRuntime.InvokeAsync<string[]>("GetValue", new object[] { "#ReferenceAssemblies" });
        IEnumerable<int> ids = ras.Where(id => int.TryParse(id, out _)).Select(sid => int.Parse(sid));
        IEnumerable<int> adds = ids.Where(id => !this.GruntTask.ReferenceAssemblies.Select(RA => RA.Id).Contains(id));
        IEnumerable<int> removes = this.GruntTask.ReferenceAssemblies.Select(RA => RA.Id).Where(id => !ids.Contains(id));
        foreach (int id in adds)
        {
            this.GruntTask.Add(await Service.GetReferenceAssembly(id));
        }
        foreach (int id in removes)
        {
            this.GruntTask.Remove(this.GruntTask.ReferenceAssemblies.Find(RA => RA.Id == id));
        }
    }

    private async Task OnChangeEmbeddedResources()
    {
        string[] ers = await IJSRuntime.InvokeAsync<string[]>("GetValue", new object[] { "#EmbeddedResources" });
        IEnumerable<int> ids = ers.Where(id => int.TryParse(id, out _)).Select(sid => int.Parse(sid));
        IEnumerable<int> adds = ids.Where(id => !this.GruntTask.EmbeddedResources.Select(ER => ER.Id).Contains(id));
        IEnumerable<int> removes = this.GruntTask.EmbeddedResources.Select(ER => ER.Id).Where(id => !ids.Contains(id));
        foreach (int id in adds)
        {
            this.GruntTask.Add(await Service.GetEmbeddedResource(id));
        }
        foreach (int id in removes)
        {
            this.GruntTask.Remove(this.GruntTask.EmbeddedResources.Find(ER => ER.Id == id));
        }
    }

    private async Task<List<Common.DotNetVersion>> GetCompatibleDotNetVersions()
    {
        string[] ids = await IJSRuntime.InvokeAsync<string[]>("GetValue", new object[] { "#CompatibleDotNetVersions" });
        return ids.Where(id => Enum.TryParse<Common.DotNetVersion>(id, out _)).Select(id => Enum.Parse<Common.DotNetVersion>(id)).ToList();
    }

    private async Task OnFormSubmit()
    {
        this.GruntTask.CompatibleDotNetVersions = await GetCompatibleDotNetVersions();
        await this.OnSubmit.InvokeAsync(this.GruntTask);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
    }
}
#pragma warning restore 1591
