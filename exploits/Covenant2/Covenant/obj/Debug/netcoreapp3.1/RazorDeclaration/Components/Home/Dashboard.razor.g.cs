#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bb76309870ddd466463a6a19e503b9081287ce6a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.Home
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
using Covenant.Models.Listeners;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
using Covenant.Components.Listeners;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
using Covenant.Components.Grunts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
using Covenant.Components.GruntTaskings;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
           [Authorize(Roles = "User, Administrator")]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/home")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/home/index")]
    public partial class Dashboard : OwningComponentBase<ICovenantService>, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 38 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Home/Dashboard.razor"
       
    [Parameter]
    public List<Grunt> Grunts { get; set; }

    [Parameter]
    public List<Listener> Listeners { get; set; }

    [Parameter]
    public List<GruntTasking> GruntTaskings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.Grunts = this.Grunts ?? (await Service.GetGrunts())
            .Where(G => G.Status != GruntStatus.Hidden && G.Status != GruntStatus.Uninitialized)
            .OrderByDescending(G => G.LastCheckIn)
            .ToList();
        this.Listeners = this.Listeners ?? (await Service.GetListeners()).ToList();
        this.GruntTaskings = this.GruntTaskings ?? (await Service.GetGruntTaskings()).ToList();
        this.INotificationService.OnCreateGrunt += OnCreateGrunt;
        this.INotificationService.OnEditGrunt += OnEditGrunt;
        this.INotificationService.OnCreateListener += OnCreateListener;
        this.INotificationService.OnEditListener += OnEditListener;
        this.INotificationService.OnCreateGruntTasking += OnCreateGruntTasking;
        this.INotificationService.OnEditGruntTasking += OnEditGruntTasking;
    }

    public void Dispose()
    {
        this.INotificationService.OnCreateGrunt -= OnCreateGrunt;
        this.INotificationService.OnEditGrunt -= OnEditGrunt;
        this.INotificationService.OnCreateListener -= OnCreateListener;
        this.INotificationService.OnEditListener -= OnEditListener;
        this.INotificationService.OnCreateGruntTasking -= OnCreateGruntTasking;
        this.INotificationService.OnEditGruntTasking -= OnEditGruntTasking;
    }

    private void OnCreateGrunt(object sender, Grunt grunt)
    {
        this.Grunts.Add(grunt);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnEditGrunt(object sender, Grunt grunt)
    {
        if (this.Grunts.Any(G => G.Id == grunt.Id))
        {
            this.Grunts[this.Grunts.FindIndex(G => G.Id == grunt.Id)] = grunt;
            this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private void OnCreateListener(object sender, Listener listener)
    {
        this.Listeners.Add(listener);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnEditListener(object sender, Listener listener)
    {
        if (this.Listeners.Any(L => L.Id == listener.Id))
        {
            this.Listeners[this.Listeners.FindIndex(L => L.Id == listener.Id)] = listener;
            this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private void OnCreateGruntTasking(object sender, GruntTasking tasking)
    {
        this.GruntTaskings.Add(tasking);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnEditGruntTasking(object sender, GruntTasking tasking)
    {
        if (this.GruntTaskings.Any(T => T.Id == tasking.Id))
        {
            this.GruntTaskings[this.GruntTaskings.FindIndex(T => T.Id == tasking.Id)] = tasking;
            this.InvokeAsync(() => this.StateHasChanged());
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INotificationService INotificationService { get; set; }
    }
}
#pragma warning restore 1591
