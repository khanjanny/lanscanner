#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "213fe4753ae895b9ee8645959723d8980f457e03"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.Grunts
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
    public partial class GruntTaskAssignForm : OwningComponentBase<ICovenantService>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 73 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntTaskAssignForm.razor"
       
    [Parameter]
    public int GruntId { get; set; }

    [Parameter]
    public EventCallback<GruntTask> OnSubmit { get; set; }

    public InputFile InputFile { get; set; }
    private SemaphoreSlim UploadSemaphore { get; set; } = new SemaphoreSlim(1, 1);
    private bool UploadInProgress { get; set; } = false;

    private IList<GruntTask> GruntTasks { get; set; }
    private GruntTask GruntTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.GruntTasks = (await Service.GetGruntTasksForGrunt(this.GruntId)).OrderBy(GT => GT.Name).ToList();
        Service.DisposeContext();
        this.GruntTask = this.GruntTasks.First();
    }

    private async Task OnTask()
    {
        await UploadSemaphore.WaitAsync();
        await this.OnSubmit.InvokeAsync(GruntTask);
        UploadSemaphore.Release();
    }

    private void OnChangeGruntTask(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out int GruntTaskId))
        {
            this.GruntTask = this.GruntTasks.FirstOrDefault(GT => GT.Id == GruntTaskId);
            this.StateHasChanged();
        }
    }

    private string ErrorMessage { get; set; }
    private async Task OnUpload(IFileListEntry[] files)
    {
        try
        {
            await UploadSemaphore.WaitAsync();
            this.UploadInProgress = true;
            this.StateHasChanged();
            for (int i = 0; i < files.Length; i++)
            {
                if (files[i] != null)
                {
                    MemoryStream ms = new MemoryStream();
                    await files[i].Data.CopyToAsync(ms);

                    GruntTaskOption option = this.GruntTask.Options.Where(O => O.FileOption).ToList()[i];
                    option.Value = Convert.ToBase64String(ms.ToArray());

                    files[i] = null;
                }
            }
        }
        catch (Exception e)
        {
            this.ErrorMessage = e.Message;
        }
        this.UploadInProgress = false;
        this.StateHasChanged();
        UploadSemaphore.Release();
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
