#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ce35ab3cbb23141b476307838a9ff4fb25477e37"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.GruntTasks
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using YamlDotNet.Serialization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using Covenant.Components.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using Covenant.Components.EmbeddedResources;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using Covenant.Components.ReferenceAssemblies;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
using Covenant.Components.ReferenceSourceLibraries;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
           [Authorize(Roles = "User, Administrator")]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/grunttask")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/grunttask/index")]
    public partial class GruntTaskIndex : OwningComponentBase<ICovenantService>, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 97 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/GruntTasks/GruntTaskIndex.razor"
       
    [Parameter]
    public IList<GruntTask> GruntTasks { get; set; }

    [Parameter]
    public IList<ReferenceSourceLibrary> ReferenceSourceLibraries { get; set; }

    [Parameter]
    public IList<ReferenceAssembly> ReferenceAssemblies { get; set; }

    [Parameter]
    public IList<EmbeddedResource> EmbeddedResources { get; set; }

    private ButtonActivatedModal _ImportModal;

    protected override async Task OnInitializedAsync()
    {
        this.GruntTasks = this.GruntTasks ?? (await Service.GetGruntTasks()).ToList();
        this.ReferenceSourceLibraries = this.ReferenceSourceLibraries ?? (await Service.GetReferenceSourceLibraries()).ToList();
        this.ReferenceAssemblies = this.ReferenceAssemblies ?? (await Service.GetReferenceAssemblies()).ToList();
        this.EmbeddedResources = this.EmbeddedResources ?? (await Service.GetEmbeddedResources()).ToList();
        this.INotificationService.OnCreateGruntTask += OnCreateGruntTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IJSRuntime.InvokeAsync<string>("ShowTab", "#tasks-tab");
        }
    }

    public void Dispose()
    {
        this.INotificationService.OnCreateGruntTask -= OnCreateGruntTask;
    }

    private void OnCreateGruntTask(object sender, GruntTask task)
    {
        this.GruntTasks.Add(task);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private string ErrorMessage { get; set; }
    private List<GruntTask> ImportedTasks { get; set; } = null;
    private async Task OnUploadImport(IFileListEntry[] files)
    {
        try
        {
            IFileListEntry file = files.FirstOrDefault();
            if (file != null)
            {
                MemoryStream ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                string yaml = Common.CovenantEncoding.GetString(ms.ToArray());
                IDeserializer deserializer = new DeserializerBuilder().Build();
                List<SerializedGruntTask> serialized = deserializer.Deserialize<List<SerializedGruntTask>>(yaml);
                this.ImportedTasks = serialized.Select(S => new GruntTask().FromSerializedGruntTask(S)).ToList();
            }
        }
        catch (Exception e)
        {
            this.ErrorMessage = e.Message;
            this.StateHasChanged();
        }
    }

    private async Task OnImport()
    {
        if (this.ImportedTasks != null)
        {
            this.ErrorMessage = "";
            foreach (GruntTask importedTask in this.ImportedTasks)
            {
                try
                {
                    await Service.CreateGruntTask(importedTask);
                }
                catch (Exception e)
                {
                    this.ErrorMessage += e.Message + Environment.NewLine;
                    this.StateHasChanged();
                }
            }
            this.ImportedTasks = null;
            await _ImportModal.DismissModal();
        }
    }

    private async Task OnExport()
    {
        try
        {
            List<SerializedGruntTask> tasks = this.GruntTasks.Select(GT => GT.ToSerializedGruntTask()).ToList();
            ISerializer serializer = new SerializerBuilder().Build();
            string yaml = serializer.Serialize(tasks);
            await IJSRuntime.InvokeAsync<string>("DownloadFile", "GruntTasks.yaml", "application/x-yaml", Convert.ToBase64String(Common.CovenantEncoding.GetBytes(yaml)));
        }
        catch (Exception)
        {
            //
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INotificationService INotificationService { get; set; }
    }
}
#pragma warning restore 1591
