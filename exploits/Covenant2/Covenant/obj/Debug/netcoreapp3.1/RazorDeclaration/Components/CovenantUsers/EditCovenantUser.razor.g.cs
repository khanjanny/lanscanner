#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ce2be5d779cecc7678a13506e2006a5b8005948d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.CovenantUsers
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor"
using Covenant.Models.Covenant;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor"
           [Authorize(Roles = "User, Administrator")]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/covenantuser/edit/{CovenantUserId}")]
    public partial class EditCovenantUser : OwningComponentBase<ICovenantService>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 49 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/CovenantUsers/EditCovenantUser.razor"
       
    [Parameter]
    public string CovenantUserId { get; set; }

    [Parameter]
    public CovenantUser CovenantUser { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private CovenantUser CurrentUser { get; set; }

    private IEnumerable<Theme> Themes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.CovenantUser = this.CovenantUser ?? await Service.GetUser(this.CovenantUserId);
        this.CurrentUser = this.CurrentUser ?? await Service.GetCurrentUser((await AuthenticationState).User);
        this.Themes = await Service.GetThemes();
        Service.DisposeContext();
    }

    private async Task OnEditRoles(IEnumerable<IdentityRole> roles)
    {
        try
        {
            IEnumerable<IdentityRole> currentRoles = (await Service.GetUserRolesForUser(this.CovenantUser.Id)).Select(UR =>
            {
                return Service.GetRole(UR.RoleId).WaitResult();
            });

            IEnumerable<IdentityRole> rolesToAdd = roles.Where(R => !currentRoles.Select(CR => CR.Id).Contains(R.Id));
            IEnumerable<IdentityRole> rolesToRemove = currentRoles.Where(CR => !roles.Select(R => R.Id).Contains(CR.Id));
            Service.DisposeContext();
            foreach (IdentityRole role in rolesToAdd)
            {
                await Service.CreateUserRole(this.CovenantUser.Id, role.Id);
            }
            Service.DisposeContext();
            foreach (IdentityRole role in rolesToRemove)
            {
                await Service.DeleteUserRole(this.CovenantUser.Id, role.Id);
            }
            NavigationManager.NavigateTo("/covenantuser");
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            // return RedirectToAction(nameof(Index));
        }
    }

    private async Task OnEditPassword(CovenantUserRegister register)
    {
        await Service.EditUserPassword(this.CurrentUser, register);
        NavigationManager.NavigateTo("/covenantuser");
    }

    private async Task OnDeleteUser(CovenantUser user)
    {
        try
        {
            await Service.DeleteUser(user.Id);
            NavigationManager.NavigateTo("/covenantuser");
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            // ModelState.AddModelError(string.Empty, e.Message);
            // return RedirectToAction(nameof(Index));
        }
    }

    private async Task OnChangeTheme()
    {
        await Service.EditUser(this.CovenantUser);
        Service.DisposeContext();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<CovenantUser> UserManager { get; set; }
    }
}
#pragma warning restore 1591
