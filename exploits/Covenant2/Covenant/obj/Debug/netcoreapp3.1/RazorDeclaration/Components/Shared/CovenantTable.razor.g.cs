#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Shared/CovenantTable.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2caa7793d79c09e7f845413a7b56475c51a2b3ea"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.Shared
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Shared/CovenantTable.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Shared/CovenantTable.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Shared/CovenantTable.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
    public partial class CovenantTable<TItem> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 109 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Shared/CovenantTable.razor"
       
    [Parameter]
    public RenderFragment TableHeader { get; set; }

    [Parameter]
    public RenderFragment<TItem> TableRow { get; set; }

    [Parameter]
    public RenderFragment ButtonTray { get; set; }

    private List<TItem> _items;
    [Parameter]
    public List<TItem> Items {
        get { return _items; }
        set
        {
            _items = value;
            _ = SearchDebounced(_searchTerm);
        }
    }
    public List<TItem> FilteredItems { get; set; }

    [Parameter]
    public EventCallback<List<TItem>> ItemsChanged { get; set; }

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = true;

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    [Parameter]
    public int PageLength { get; set; }

    [Parameter]
    public Func<TItem, string, bool> SearchRow { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    public event EventHandler OnSortHeader = delegate { };
    public event EventHandler OnSearch = delegate { };

    CancellationTokenSource searchTokenSource;
    private string _searchTerm = "";
    public string SearchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            _ = SearchDebounced(_searchTerm);
        }
    }

    private int TotalPages
    {
        get
        {
            return (int)Math.Ceiling(Math.Max(this.FilteredItems.Count(), 1) / (decimal)PageLength);
        }
    }

    private int CurrentPage { get; set; }

    protected override void OnInitialized()
    {
        this.FilteredItems = this.Items.ToList();
        if (!this.IsPaginated)
        {
            this.PageLength = this.FilteredItems.Count();
        }
        this.CurrentPage = 0;
    }

    private void OnNavigateToFront()
    {
        this.CurrentPage = 0;
    }

    private void OnNavigateToBack()
    {
        this.CurrentPage = this.TotalPages - 1;
    }

    private void OnNavigateToLeft()
    {
        if (this.CurrentPage > 0)
        {
            this.CurrentPage--;
        }
    }

    private void OnNavigateToRight()
    {
        if (this.CurrentPage < this.TotalPages - 1)
        {
            this.CurrentPage++;
        }
    }

    private void OnNavigateToPage(int page)
    {
        this.CurrentPage = page;
    }

    public async Task SearchDebounced(string query)
    {
        if (this.IsSearchable)
        {
            searchTokenSource?.Cancel();
            searchTokenSource = new CancellationTokenSource();
            var cancellationToken = searchTokenSource.Token;
            await Task.Delay(500);
            if (!cancellationToken.IsCancellationRequested)
            {
                if (!string.IsNullOrEmpty(_searchTerm))
                {
                    List<TItem> results = this.Items
                        .Where(I => this.SearchRow.Invoke(I, _searchTerm))
                        .ToList();
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        this.FilteredItems = results;
                        this.CurrentPage = 0;
                        searchTokenSource = null;
                        this.StateHasChanged();
                    }
                }
                else if (_searchTerm == string.Empty)
                {
                    this.FilteredItems = this.Items.ToList();
                    this.CurrentPage = 0;
                    this.StateHasChanged();
                }
            }
        }
        else
        {
            this.FilteredItems = this.Items.ToList();
            this.StateHasChanged();
        }
    }

    public async Task OnSort<T>(Func<TItem, T> GetSortableProperty, bool Direction)
    {
        if (this.IsSortable)
        {
            if (Direction)
            {
                this.Items = this.Items.OrderBy(GetSortableProperty).ToList();
                this.FilteredItems = this.FilteredItems.OrderBy(GetSortableProperty).ToList();
            }
            else
            {
                this.Items = this.Items.OrderByDescending(GetSortableProperty).ToList();
                this.FilteredItems = this.FilteredItems.OrderByDescending(GetSortableProperty).ToList();
            }
            this.OnSortHeader(this, new EventArgs { });
            this.StateHasChanged();
            await this.ItemsChanged.InvokeAsync(Items);
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
