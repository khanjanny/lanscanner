#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b033e57a2df5f0985d054003f24b7f9004687a1f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.Grunts
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor"
using Covenant.Models.Covenant;

#line default
#line hidden
#nullable disable
    public partial class GruntCommandCard : OwningComponentBase<ICovenantService>, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 72 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntCommandCard.razor"
       
    [Parameter]
    public int GruntCommandId { get; set; }
    private GruntCommand GruntCommand { get; set; }

    [Parameter]
    public bool IsMinimized { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        this.GruntCommand = await Service.GetGruntCommand(this.GruntCommandId);
        this.GruntCommand.CommandOutput ??= await Service.GetCommandOutput(this.GruntCommand.CommandOutputId);
        Service.DisposeContext();
        this.INotificationService.OnEditGruntCommand += OnEditGruntCommand;
        this.INotificationService.OnEditCommandOutput += OnEditCommandOutput;
        this.INotificationService.OnEditGruntTasking += OnEditGruntTasking;
    }

    public void Dispose()
    {
        this.INotificationService.OnEditGruntCommand -= OnEditGruntCommand;
        this.INotificationService.OnEditCommandOutput -= OnEditCommandOutput;
        this.INotificationService.OnEditGruntTasking -= OnEditGruntTasking;
    }

    private async void OnEditCommandOutput(object sender, CommandOutput commandOutput)
    {
        if (this.GruntCommand.CommandOutput != null && this.GruntCommand.CommandOutput.Id == commandOutput.Id)
        {
            this.GruntCommand = await Service.GetGruntCommand(this.GruntCommandId);
            Service.DisposeContext();
            this.GruntCommand.CommandOutput ??= await Service.GetCommandOutput(this.GruntCommand.CommandOutputId);
            Service.DisposeContext();
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async void OnEditGruntCommand(object sender, GruntCommand gruntCommand)
    {
        if (this.GruntCommandId == gruntCommand.Id)
        {
            this.GruntCommand = await Service.GetGruntCommand(this.GruntCommandId);
            Service.DisposeContext();
            this.GruntCommand.CommandOutput ??= await Service.GetCommandOutput(this.GruntCommand.CommandOutputId);
            Service.DisposeContext();
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async void OnEditGruntTasking(object sender, GruntTasking gruntTasking)
    {
        if (this.GruntCommand.GruntTasking != null && this.GruntCommand.GruntTasking.Id == gruntTasking.Id)
        {
            this.GruntCommand = await Service.GetGruntCommand(this.GruntCommandId);
            this.GruntCommand.CommandOutput ??= await Service.GetCommandOutput(this.GruntCommand.CommandOutputId);
            Service.DisposeContext();
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async Task OnToggle()
    {
        if (this.IsMinimized && this.GruntCommand.CommandOutput == null)
        {
            this.GruntCommand = await Service.GetGruntCommand(this.GruntCommand.Id);
            Service.DisposeContext();
        }
        this.IsMinimized = !IsMinimized;
    }

    private async Task<DownloadEvent> GetDownloadEvent(GruntCommand command)
    {
        if (GruntCommand.GruntTasking != null && GruntCommand.CommandOutput != null)
        {
            IEnumerable<DownloadEvent> downloadEvents = await Service.GetDownloadEvents();
            Service.DisposeContext();
            return downloadEvents
            .FirstOrDefault(DE => DE.Time == command.GruntTasking.CompletionTime && DE.FileContents == command.CommandOutput.Output);
        }
        return null;
    }

    private async Task OnDownload(DownloadEvent downloadEvent)
    {
        if (!Common.ContentTypeMappings.TryGetValue(Path.GetExtension(downloadEvent.FileName), out string contentType))
        {
            contentType = Common.DefaultContentTypeMapping;
        }
        await IJSRuntime.InvokeAsync<string>(
            "DownloadFile",
            Path.GetFileName(downloadEvent.FileName),
            contentType,
            downloadEvent.FileContents
        );
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INotificationService INotificationService { get; set; }
    }
}
#pragma warning restore 1591
