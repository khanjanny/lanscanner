#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0432d5d36ba0cf9342b8cd9d9ca72e1c7217116c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Covenant.Components.Templates
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor"
using Covenant.Models.Covenant;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor"
using Covenant.Models.Listeners;

#line default
#line hidden
#nullable disable
    public partial class ImplantTemplateForm : OwningComponentBase<ICovenantService>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 108 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Templates/ImplantTemplateForm.razor"
       
    private ImplantTemplate _ImplantTemplate;
    [Parameter]
    public ImplantTemplate ImplantTemplate
    {
        get
        {
            return _ImplantTemplate;
        }
        set
        {
            if (value.Id > 0)
            {
                _ImplantTemplate = Service.GetImplantTemplate(value.Id).WaitResult();
            }
            else
            {
                _ImplantTemplate = value;
            }
        }
    }

    [Parameter]
    public string SubmitIcon { get; set; } = "edit";

    [Parameter]
    public string SubmitLabel { get; set; } = "Edit";

    [Parameter]
    public EventCallback<ImplantTemplate> OnSubmit { get; set; }

    [CascadingParameter]
    public Theme Theme { get; set; }

    private IList<ElementReference> CodeMirrorElements { get; set; } = GetElementReferenceList(2);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (ElementReference CodeMirrorElement in CodeMirrorElements)
            {
                await IJSRuntime.InvokeAsync<string>("InitializeCodeMirror", CodeMirrorElement, Theme.CodeMirrorTheme.ToString());
            }
        }
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", new object[] { "#Language.selectpicker", ((int)Enum.Parse(typeof(ImplantLanguage), ImplantTemplate.Language.ToString())).ToString() });
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", new object[] { "#CommType.selectpicker", ((int)Enum.Parse(typeof(CommunicationType), ImplantTemplate.CommType.ToString())).ToString() });
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", new object[] { "#ImplantDirection.selectpicker", ((int)Enum.Parse(typeof(ImplantDirection), ImplantTemplate.ImplantDirection.ToString())).ToString() });
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", new object[] { "#CompatibleListenerTypes.selectpicker", ImplantTemplate.CompatibleListenerTypes.Select(CLT => CLT.Id.ToString()).ToArray() });
        if (ImplantTemplate.Language == ImplantLanguage.CSharp)
        {
            await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", new object[] { "#CompatibleDotNetVersions.selectpicker", ImplantTemplate.CompatibleDotNetVersions.Select(CDNV => ((int)Enum.Parse(typeof(Common.DotNetVersion), CDNV.ToString())).ToString()).ToArray() });
        }
    }

    private static IList<ElementReference> GetElementReferenceList(int size)
    {
        IList<ElementReference> references = new List<ElementReference>();
        for (int i = 0; i < size; i++)
        {
            references.Add(new ElementReference());
        }
        return references;
    }

    private IEnumerable<ListenerType> GetListenerTypes()
    {
        return Service.GetListenerTypes().WaitResult();
    }

    public async Task<List<ListenerTypeImplantTemplate>> GetCompatibleListenerTypeImplantTemplates()
    {
        string[] clts = await IJSRuntime.InvokeAsync<string[]>("GetValue", new object[] { "#CompatibleListenerTypes" });
        IEnumerable<int> ids = clts.Where(id => int.TryParse(id, out _)).Select(sid => int.Parse(sid));
        List<ListenerTypeImplantTemplate> types = new List<ListenerTypeImplantTemplate>();
        foreach (int id in ids)
        {
            types.Add(new ListenerTypeImplantTemplate
            {
                ListenerTypeId = id,
                ListenerType = await Service.GetListenerType(id),
                ImplantTemplateId = this.ImplantTemplate.Id,
                ImplantTemplate = this.ImplantTemplate
            });
        }
        return types;
    }

    private async Task<List<Common.DotNetVersion>> GetCompatibleDotNetVersions()
    {
        string[] ids = await IJSRuntime.InvokeAsync<string[]>("GetValue", new object[] { "#CompatibleDotNetVersions" });
        return ids.Where(id => Enum.TryParse<Common.DotNetVersion>(id, out _)).Select(id => Enum.Parse<Common.DotNetVersion>(id)).ToList();
    }

    private async Task OnSetStagerCode(ChangeEventArgs e)
    {
        this.ImplantTemplate.CompatibleDotNetVersions = await this.GetCompatibleDotNetVersions();
        this.ImplantTemplate.SetListenerTypeImplantTemplates(await this.GetCompatibleListenerTypeImplantTemplates());
        this.ImplantTemplate.StagerCode = e.Value.ToString();
    }

    private async Task OnSetExecutorCode(ChangeEventArgs e)
    {
        this.ImplantTemplate.CompatibleDotNetVersions = await this.GetCompatibleDotNetVersions();
        this.ImplantTemplate.SetListenerTypeImplantTemplates(await this.GetCompatibleListenerTypeImplantTemplates());
        this.ImplantTemplate.ExecutorCode = e.Value.ToString();
    }

    private async Task Submit()
    {
        this.ImplantTemplate.CompatibleDotNetVersions = await GetCompatibleDotNetVersions();
        this.ImplantTemplate.SetListenerTypeImplantTemplates(await GetCompatibleListenerTypeImplantTemplates());
        await this.OnSubmit.InvokeAsync(this.ImplantTemplate);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
    }
}
#pragma warning restore 1591
