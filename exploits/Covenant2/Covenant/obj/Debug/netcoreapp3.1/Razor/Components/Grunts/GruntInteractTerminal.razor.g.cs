#pragma checksum "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9d2be95530243fb08f78cf44a651752b41ffc844"
// <auto-generated/>
#pragma warning disable 1591
namespace Covenant.Components.Grunts
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/_Imports.razor"
using Covenant.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
using Microsoft.AspNetCore.SignalR;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
using Covenant.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
using Covenant.Hubs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
using Covenant.Models.Grunts;

#line default
#line hidden
#nullable disable
    public partial class GruntInteractTerminal : OwningComponentBase<ICovenantService>, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenComponent<Covenant.Components.Grunts.GruntTaskOptionsModal>(0);
            __builder.AddAttribute(1, "OnSubmit", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<Covenant.Models.Grunts.GruntTask>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Covenant.Models.Grunts.GruntTask>(this, 
#nullable restore
#line 15 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                                                     OnTaskInteract

#line default
#line hidden
#nullable disable
            )));
            __builder.AddComponentReferenceCapture(2, (__value) => {
#nullable restore
#line 15 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                             OptionsModal = (Covenant.Components.Grunts.GruntTaskOptionsModal)__value;

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseComponent();
            __builder.AddMarkupContent(3, "\n\n");
            __builder.OpenElement(4, "div");
            __builder.AddAttribute(5, "class", "interact-style interact-border d-flex flex-column rounded-lg");
            __builder.AddMarkupContent(6, "\n    ");
            __builder.OpenElement(7, "div");
            __builder.AddAttribute(8, "id", "interact-scroll");
            __builder.AddAttribute(9, "class", "grunt-interact overflow-auto");
            __builder.AddMarkupContent(10, "\n        ");
            __builder.OpenElement(11, "div");
            __builder.AddAttribute(12, "id", "interact-accordion");
            __builder.AddAttribute(13, "class", "accordion w-100");
            __builder.AddMarkupContent(14, "\n");
#nullable restore
#line 20 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
             for (int i = 0; i < this.GruntCommands.Count(); i++)
            {
                int number = i;
                GruntCommand command = this.GruntCommands[number];

#line default
#line hidden
#nullable disable
            __builder.AddContent(15, "                ");
            __builder.OpenComponent<Covenant.Components.Grunts.GruntCommandCard>(16);
            __builder.AddAttribute(17, "GruntCommandId", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Int32>(
#nullable restore
#line 24 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                                                  command.Id

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(18, "IsMinimized", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 24 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                                                                           (number < this.GruntCommands.Count() - 5)

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(19, "\n");
#nullable restore
#line 25 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
            }

#line default
#line hidden
#nullable disable
            __builder.AddContent(20, "        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(21, "\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(22, "\n    ");
            __builder.OpenElement(23, "div");
            __builder.AddAttribute(24, "class", "interact-style interact-border d-flex flex-row w-100 p-0 m-0");
            __builder.AddMarkupContent(25, "\n        ");
            __builder.OpenElement(26, "div");
            __builder.AddAttribute(27, "class", "d-inline d-flex flex-column justify-content-center text-muted ml-1");
            __builder.AddMarkupContent(28, "\n            ");
            __builder.OpenElement(29, "div");
            __builder.AddAttribute(30, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 30 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                           HistoryUp

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(31, "class", "mb-n1 p-0 border-0 hover-white");
            __builder.AddAttribute(32, "style", "z-index: 1");
            __builder.AddMarkupContent(33, "\n                <span class=\"fe fe-chevron-up\"></span>\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(34, "\n            ");
            __builder.OpenElement(35, "div");
            __builder.AddAttribute(36, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 33 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                           HistoryDown

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(37, "class", "mt-n1 p-0 border-0 hover-white");
            __builder.AddMarkupContent(38, "\n                <span class=\"fe fe-chevron-down\"></span>\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(39, "\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(40, "\n        ");
            __builder.OpenElement(41, "input");
            __builder.AddAttribute(42, "id", 
#nullable restore
#line 37 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                    GuidId

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(43, "class", "interact-style d-inline form-control typeahead w-100 mr-0 pl-1 border-0");
            __builder.AddAttribute(44, "onkeyup", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(this, 
#nullable restore
#line 39 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                         (e => OnKeyUp(e))

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(45, "value", 
#nullable restore
#line 39 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                                                    InteractInput

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(46, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 39 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                                                                              e => OnSetInteractInput(e)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(47, "type", "text");
            __builder.AddAttribute(48, "autocomplete", "off");
            __builder.AddAttribute(49, "placeholder", "Interact...");
            __builder.AddAttribute(50, "aria-label", "Interact");
            __builder.CloseElement();
            __builder.AddMarkupContent(51, "\n\n        ");
            __builder.OpenElement(52, "button");
            __builder.AddAttribute(53, "type", "button");
            __builder.AddAttribute(54, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 42 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
                                        OnSubmit

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(55, "class", "interact-style interact-button-border d-inline btn rounded-0");
            __builder.AddMarkupContent(56, "\n            Send\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(57, "\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(58, "\n");
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 48 "/root/nk/Github/lanscanner/exploits/Covenant/Covenant/Components/Grunts/GruntInteractTerminal.razor"
       
    [Parameter]
    public Grunt Grunt { get; set; }
    private IList<GruntCommand> GruntCommands { get; set; }

    [Parameter]
    public EventCallback<Tuple<Grunt, string>> OnInteract { get; set; }

    private string GuidId { get; set; } = "a" + Utilities.CreateShortGuid();

    private GruntTaskOptionsModal OptionsModal { get; set; }

    private int HistoryIndex { get; set; }
    private IList<GruntCommand> History { get; set; }
    private string HistorySavedState { get; set; } = string.Empty;
    private string InteractInput { get; set; } = string.Empty;
    private IEnumerable<string> Suggestions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.GruntCommands = (await Service.GetGruntCommandsForGrunt(this.Grunt.Id)).ToList();
        this.History = this.GruntCommands.OrderBy(GC => GC.CommandTime).ToList();
        this.HistoryIndex = this.History.Count;
        this.Suggestions = await Service.GetCommandSuggestionsForGrunt(this.Grunt);
        Service.DisposeContext();
        this.INotificationService.OnCreateGruntCommand += OnCreateGruntCommand;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IJSRuntime.InvokeAsync<string>("InitializeTypeahead", $"#{GuidId}.typeahead", this.Suggestions);
        }
    }

    public void Dispose()
    {
        this.INotificationService.OnCreateGruntCommand -= OnCreateGruntCommand;
    }

    private async void OnCreateGruntCommand(object sender, GruntCommand gruntCommand)
    {
        if (this.Grunt.Id == gruntCommand.GruntId)
        {
            this.GruntCommands = (await Service.GetGruntCommandsForGrunt(this.Grunt.Id)).ToList();
            Service.DisposeContext();
            this.History = this.GruntCommands.OrderBy(GC => GC.CommandTime).ToList();
            this.HistoryIndex = this.History.Count;
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private void HistoryUp()
    {
        bool updated = false;
        if (this.HistoryIndex == this.History.Count && this.InteractInput != string.Empty)
        {
            this.HistorySavedState = this.InteractInput;
        }
        else if (this.HistoryIndex == this.History.Count && this.InteractInput == string.Empty && this.HistorySavedState != string.Empty)
        {
            this.InteractInput = this.HistorySavedState;
            updated = true;
        }
        if (this.HistoryIndex != 0)
        {
            if (!updated)
            {
                this.HistoryIndex--;
                this.InteractInput = this.History[this.HistoryIndex].Command;
            }
            this.StateHasChanged();
            _ = IJSRuntime.InvokeAsync<string>("SetTypeaheadVal", $"#{GuidId}.typeahead", this.InteractInput);
        }
    }

    private void HistoryDown()
    {
        if (this.HistoryIndex < (this.History.Count - 1))
        {
            this.HistoryIndex++;
            this.InteractInput = this.History[this.HistoryIndex].Command;
            this.StateHasChanged();
            _ = IJSRuntime.InvokeAsync<string>("SetTypeaheadVal", $"#{GuidId}.typeahead", this.InteractInput);
        }
        else if (this.HistoryIndex == (this.History.Count - 1))
        {
            this.HistoryIndex++;
            this.InteractInput = this.HistorySavedState;
            this.StateHasChanged();
            _ = IJSRuntime.InvokeAsync<string>("SetTypeaheadVal", $"#{GuidId}.typeahead", this.InteractInput);
        }
        else if (this.HistoryIndex == this.History.Count && this.InteractInput != string.Empty)
        {
            this.HistorySavedState = this.InteractInput;
            this.InteractInput = string.Empty;
            this.StateHasChanged();
            _ = IJSRuntime.InvokeAsync<string>("SetTypeaheadVal", $"#{GuidId}.typeahead", this.InteractInput);
        }
    }

    private void OnSetInteractInput(ChangeEventArgs e)
    {
        this.InteractInput = e.Value.ToString();
        _ = IJSRuntime.InvokeAsync<string>("ClearSelectedTypeaheadVal");
    }

    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp":
                bool hasSuggestions = await IJSRuntime.InvokeAsync<bool>("TypeAheadHasSuggestions", $"#{GuidId}.typeahead");
                if (!hasSuggestions)
                {
                    HistoryUp();
                }
                break;
            case "ArrowDown":
                HistoryDown();
                break;
            case "Enter":
                string val = await IJSRuntime.InvokeAsync<string>("GetSelectedTypeaheadVal", $"#{GuidId}.typeahead");
                if (! string.IsNullOrWhiteSpace(val))
                {
                    this.InteractInput = val;
                }
                await this.OnSubmit();
                break;
        }
    }

    private async Task OnSubmit()
    {
        string copy = this.InteractInput;
        this.InteractInput = "";
        this.StateHasChanged();

        List<ParsedParameter> parameters = ParsedParameter.GetParsedCommandParameters(copy);
        string commandName = parameters.Count > 0 ? parameters.FirstOrDefault().Value : "";
        GruntTask commandTask = null;
        try
        {
            commandTask = await Service.GetGruntTaskByName(commandName, this.Grunt.DotNetVersion);
            Service.DisposeContext();
            string errors = await Service.ParseParametersIntoTask(commandTask, parameters);
            Service.DisposeContext();
        }
        catch (ControllerNotFoundException) { }
        if (commandTask != null && commandTask.Options.Any(O => O.FileOption))
        {
            await OptionsModal.Show(commandTask);
        }
        else
        {
            this.OnInteractProxy(copy);
        }
    }

    private void OnTaskInteract(GruntTask task)
    {
        this.OnInteractProxy(task.GetVerboseCommand(true));
    }

    private void OnInteractProxy(string input)
    {
        _ = OnInteract.InvokeAsync(new Tuple<Grunt, string>(this.Grunt, input));
        _ = IJSRuntime.InvokeAsync<string>("SetTypeaheadVal", $"#{GuidId}.typeahead", this.InteractInput);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INotificationService INotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHubContext<EventHub> EventHub { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHubContext<GruntHub> GruntHub { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
    }
}
#pragma warning restore 1591
